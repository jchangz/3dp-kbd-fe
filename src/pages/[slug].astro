---
import Layout from "../layouts/Layout.astro";
import Three from "../components/Three.astro";
import json from "../assets/routes.json";
import { config } from "../assets/configurator/settings.json";
import { options } from "../assets/configurator/options.json";

type ConfigOptionsObj = {
  title: string;
  "data-type": string;
  value: string;
  default: boolean;
};
type ConfigObj = {
  [key: string]: {
    left: ConfigOptionsObj[];
    right: ConfigOptionsObj[];
    shift?: ConfigOptionsObj[];
  };
};
type ConfigOptions = {
  title: string;
  id: string;
  options: ConfigOptionsObj[];
};

interface Props {
  slug: string;
  title: string;
  kbdType: string;
  caseType: string;
  optionsList: ConfigOptions[];
  colorOptions: ConfigOptions[];
}

export async function getStaticPaths() {
  const { routes } = json;
  const pages = routes.map((route) => {
    return {
      slug: route.slug,
      title: route.title,
      kbdType: route.kbdType,
      caseType: route.caseType,
    };
  });
  return pages.map(({ slug, title, kbdType, caseType }) => {
    const {
      left: leftOptions,
      right: rightOptions,
      shift: shiftOptions,
    } = (config as ConfigObj)[kbdType];

    const optionsList = [];

    optionsList.push({ ...options.left, options: leftOptions });
    optionsList.push({ ...options.right, options: rightOptions });

    if (kbdType === "kbo") {
      optionsList.push({ ...options.shift, options: shiftOptions });
    }

    if (caseType === "1" || caseType === "3" || caseType === "g") {
      optionsList.push(options.bottom);
    }

    optionsList.push(options.mounting);

    const colorOptions = [options["case-color"], options["keycap-color"]];

    return {
      params: { slug },
      props: {
        title,
        kbdType,
        caseType,
        optionsList,
        colorOptions,
      },
    };
  });
}
const { title, kbdType, caseType, optionsList, colorOptions } = Astro.props;
---

<Layout title={title}>
  <Three type={caseType} keyboard={kbdType} />
  <div
    id="configurator"
    class="col-span-12 flex w-full flex-col justify-end border-[#A3A3A3] p-2 uppercase opacity-0 transition-opacity duration-700 xl:col-span-3 xl:col-start-1 xl:row-start-1"
  >
    <div class="panel">
      <p class="panel-heading">Settings</p>
      {
        colorOptions.map((option) => (
          <div class="panel-section">
            <label class="panel-section-label" for={option.id}>
              {option.title}:
            </label>
            <input
              class="panel-section-input three-gui w-6/12 border-inherit p-1"
              type="color"
              id={option.id}
              name={option.title}
              value="#171718"
            />
          </div>
        ))
      }
    </div>

    <div class="panel">
      <p class="panel-heading">Configuration</p>
      {
        optionsList.map((type) => (
          <div class="panel-section">
            <label class="panel-section-label" for={type.id}>
              {type.title}:
            </label>
            <div class="relative w-6/12 border-inherit">
              <select
                id={type.id}
                class="panel-section-input w-full p-2 uppercase"
              >
                {type.options.map((opt) => (
                  <option
                    class="bg-black"
                    data-type={opt["data-type"]}
                    value={opt.value}
                    selected={opt.default && "selected"}
                  >
                    {opt.title}
                  </option>
                ))}
              </select>
              <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-white">
                <svg
                  class="h-4 w-4 fill-current"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                >
                  <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                </svg>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</Layout>

<style>
  .panel {
    @apply mb-10 divide-y border border-inherit font-mono tracking-tighter xl:max-w-sm;
    .panel-heading {
      @apply bg-white p-1 px-2 font-sans text-xs tracking-normal text-black;
    }
    .panel-section {
      @apply relative flex items-center divide-x border-inherit;
      .panel-section-label {
        @apply w-6/12 px-3 text-base text-gray-300;
      }
      .panel-section-input {
        @apply block appearance-none bg-transparent uppercase leading-tight shadow focus:outline-none focus:ring;
      }
    }
  }
</style>
