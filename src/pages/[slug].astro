---
import Layout from "../layouts/Layout.astro";
import Three from "../components/Three.astro";
import json from "../assets/routes.json";
import { config } from "../assets/configurator/settings.json";
import { options } from "../assets/configurator/options.json";

type ConfigOptionsObj = {
  title: string;
  "data-type": string;
  value: string;
  default: boolean;
};
type ConfigObj = {
  [key: string]: {
    left: ConfigOptionsObj[];
    right: ConfigOptionsObj[];
    shift?: ConfigOptionsObj[];
  };
};
type ConfigOptions = {
  title: string;
  id: string;
  options: ConfigOptionsObj[];
};

interface Props {
  slug: string;
  title: string;
  kbdType: string;
  caseType: string;
  optionsList: ConfigOptions[];
  colorOptions: ConfigOptions[];
}

export async function getStaticPaths() {
  const { routes } = json;
  const pages = routes.map((route) => {
    return {
      slug: route.slug,
      title: route.title,
      kbdType: route.kbdType,
      caseType: route.caseType,
    };
  });
  return pages.map(({ slug, title, kbdType, caseType }) => {
    const {
      left: leftOptions,
      right: rightOptions,
      shift: shiftOptions,
    } = (config as ConfigObj)[kbdType];

    const optionsList = [];

    optionsList.push({ ...options.left, options: leftOptions });
    optionsList.push({ ...options.right, options: rightOptions });

    if (kbdType === "kbo") {
      optionsList.push({ ...options.shift, options: shiftOptions });
    }

    if (caseType === "1" || caseType === "3" || caseType === "g") {
      optionsList.push(options.bottom);
    }

    const colorOptions = [options["case-color"], options["keycap-color"]];

    return {
      params: { slug },
      props: {
        title,
        kbdType,
        caseType,
        optionsList,
        colorOptions,
      },
    };
  });
}
const { title, kbdType, caseType, optionsList, colorOptions } = Astro.props;
---

<Layout title={title}>
  <Three type={caseType} keyboard={kbdType} />
  <div
    class="absolute bottom-24 flex w-full items-center justify-center space-x-4 text-center font-mono text-xl uppercase"
  >
    {
      colorOptions.map((option) => (
        <div class="relative inline-block w-24">
          <label class="text-base text-gray-300" for={option.id}>
            {option.title}
          </label>
          <input
            class="three-gui focus:shadow-outline block w-full appearance-none rounded-[6px] border border-gray-400 bg-black/[.5] p-2 text-center leading-tight shadow hover:border-gray-500 focus:outline-none"
            type="color"
            id={option.id}
            name={option.title}
            value="#171718"
          />
        </div>
      ))
    }
    {
      optionsList.map((type) => (
        <div class="relative inline-block w-48">
          <label class="text-base text-gray-300" for={type.id}>
            {type.title}
          </label>
          <select
            id={type.id}
            class="focus:shadow-outline block w-full appearance-none rounded-[6px] border border-gray-400 bg-black/[.5] p-4 text-center uppercase leading-tight shadow hover:border-gray-500 focus:outline-none"
          >
            {type.options.map((opt) => (
              <option
                class="bg-black"
                data-type={opt["data-type"]}
                value={opt.value}
                selected={opt.default && "selected"}
              >
                {opt.title}
              </option>
            ))}
          </select>
        </div>
      ))
    }
  </div>
</Layout>
