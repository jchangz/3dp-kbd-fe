---
import Layout from "../layouts/Layout.astro";
import Three from "../components/Three.astro";
import json from "../assets/routes.json";
import { config } from "../assets/config.json";

type ConfigOptionsObj = {
  title: string;
  "data-type": string;
  value: string;
  default: boolean;
}
type ConfigObj = {
  [key: string]: {
    left: ConfigOptionsObj[];
    right: ConfigOptionsObj[];
    shift?: ConfigOptionsObj[];
  };
}

interface Props {
  slug: string;
  title: string;
  kbdType: string;
  caseType: string;
  leftOptions: ConfigOptionsObj[];
  rightOptions: ConfigOptionsObj[];
  shiftOptions: ConfigOptionsObj[];
  bottomOptions: ConfigOptionsObj[];
}

export async function getStaticPaths() {
  const { routes } = json;
  const pages = routes.map((route) => {
    return {
      slug: route.slug,
      title: route.title,
      kbdType: route.kbdType,
      caseType: route.caseType,
    };
  });
  return pages.map(({ slug, title, kbdType, caseType }) => {
    const { left: leftOptions, right: rightOptions, shift: shiftOptions } = (config as ConfigObj)[kbdType];
    let bottomOptions;
    if (caseType === "1" || caseType === "3" || caseType === "g") {
      bottomOptions = [
        {
          title: "Standard",
          "data-type": "bottom",
          value: "standard",
        },
        {
          title: "Vented",
          "data-type": "bottom",
          value: "vented",
          default: true,
        },
      ];
    }
    return {
      params: { slug },
      props: { title, kbdType, caseType, leftOptions, rightOptions, shiftOptions, bottomOptions },
    };
  });
}
const { title, kbdType, caseType, leftOptions, rightOptions, shiftOptions, bottomOptions } = Astro.props;
---

<Layout title={title}>
  <Three type={caseType} keyboard={kbdType} />
  <div class="absolute top-8">
    <p class="">{title}</p>
    <form id="left-options">
      <fieldset>
        <legend>Left Options:</legend>
        {
          leftOptions.map((opt) => (
            <div>
              <input type="radio" id={`left-${opt.value}`} data-type={opt["data-type"]} name="left" value={opt.value} checked={opt.default} />
              <label for={`left-${opt.value}`}>{opt.title}</label>
            </div>
          ))
        }
      </fieldset>
    </form>
    <form id="right-options">
      <fieldset>
        <legend>Right Options:</legend>
        {
          rightOptions.map((opt) => (
            <div>
              <input type="radio" id={`right-${opt.value}`} data-type={opt["data-type"]} name="right" value={opt.value} checked={opt.default} />
              <label for={`right-${opt.value}`}>{opt.title}</label>
            </div>
          ))
        }
      </fieldset>
    </form>
    <>
      {
        kbdType === "kbo" && (
          <form id="right-shift">
            <fieldset>
              <legend>Right Shift:</legend>
              {shiftOptions.map((opt) => (
                <div>
                  <input type="radio" id={opt.value} data-type={opt["data-type"]} name="right" value={opt.value} checked={opt.default} />
                  <label for={opt.value}>{opt.title}</label>
                </div>
              ))}
            </fieldset>
          </form>
        )
      }
    </>
    <>
      {
        bottomOptions && (
          <form id="bottom-case">
            <fieldset>
              <legend>Bottom:</legend>
              {bottomOptions.map((opt) => (
                <div>
                  <input type="radio" id={opt.value} data-type={opt["data-type"]} name="bottom" value={opt.value} checked={opt.default} />
                  <label for={opt.value}>{opt.title}</label>
                </div>
              ))}
            </fieldset>
          </form>
        )
      }
    </>
  </div>
</Layout>
